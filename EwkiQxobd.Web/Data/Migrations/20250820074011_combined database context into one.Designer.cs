// <auto-generated />
using System;
using EwkiQxobd.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EwkiQxobd.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250820074011_combined database context into one")]
    partial class combineddatabasecontextintoone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GeisID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account", "eqo");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoContactInfo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContactInfo", "eqo");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContractNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EqoTicketSourceid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("EqoTicketSourceid");

                    b.ToTable("Contract", "eqo");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoContractObject", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<int>("EqoAccountId")
                        .HasColumnType("int")
                        .HasColumnName("ShipTo");

                    b.Property<long>("EqoContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("Contract");

                    b.Property<string>("InstrumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("EqoAccountId");

                    b.HasIndex("EqoContractId");

                    b.ToTable("ContractObject", "eqo");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoTicketSource", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("TicketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TicketSource", "eqo");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.IqxNetworkInstrument", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("InstrumentGroup")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("InstrumentGroup");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("InstrumentName");

                    b.Property<Guid>("LinkedAccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LinkedAccount");

                    b.Property<int?>("LinkedAccountId")
                        .HasColumnType("int");

                    b.Property<long?>("NetworkId")
                        .HasColumnType("bigint")
                        .HasColumnName("NetworkId");

                    b.Property<string>("NetworkName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("NetworkName");

                    b.Property<DateTime>("QueryTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("QueryTimeStamp");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("char(16)")
                        .HasColumnName("System");

                    b.HasKey("id");

                    b.HasIndex("LinkedAccountId");

                    b.ToTable("NetworkInstrument", "iqx");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.IqxOrganization", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "accountNumber");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<Guid>("GeisGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "street");

                    b.HasKey("id");

                    b.HasIndex("GeisGuid")
                        .IsUnique();

                    b.ToTable("Organization", "iqx");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.IqxSystem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("IqxSystem");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.Views.vwSysnetinst", b =>
                {
                    b.Property<string>("InstrumentGroup")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("InstrumentGroup");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("InstrumentName");

                    b.Property<Guid>("LinkedAccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LinkedAccount");

                    b.Property<long?>("NetworkId")
                        .HasColumnType("bigint")
                        .HasColumnName("NetworkId");

                    b.Property<string>("NetworkName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("NetworkName");

                    b.Property<DateTime>("QueryTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("QueryTimeStamp");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("char(16)")
                        .HasColumnName("System");

                    b.Property<long>("id")
                        .HasColumnType("bigint")
                        .HasColumnName("InstrumentId");

                    b.ToTable((string)null);

                    b.ToView("vw_LatestSysnetinst", (string)null);
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.Views.vwSysnetinstorg", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar")
                        .HasColumnName("AccountNumber");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar")
                        .HasColumnName("City");

                    b.Property<string>("InstrumentGroup")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("InstrumentGroup");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("InstrumentName");

                    b.Property<Guid>("LinkedAccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LinkedAccount");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar")
                        .HasColumnName("OrgName");

                    b.Property<long?>("NetworkId")
                        .HasColumnType("bigint")
                        .HasColumnName("NetworkId");

                    b.Property<string>("NetworkName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("NetworkName");

                    b.Property<DateTime>("QueryTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("QueryTimeStamp");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar")
                        .HasColumnName("Street");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("char(16)")
                        .HasColumnName("System");

                    b.Property<long>("id")
                        .HasColumnType("bigint")
                        .HasColumnName("InstrumentId");

                    b.ToTable((string)null);

                    b.ToView("vw_LatestSysnetinstorg", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoContract", b =>
                {
                    b.HasOne("EwkQxObd.Core.Model.EqoTicketSource", null)
                        .WithMany("IqxContracts")
                        .HasForeignKey("EqoTicketSourceid");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoContractObject", b =>
                {
                    b.HasOne("EwkQxObd.Core.Model.EqoAccount", "ShipTo")
                        .WithMany()
                        .HasForeignKey("EqoAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EwkQxObd.Core.Model.EqoContract", "Contract")
                        .WithMany()
                        .HasForeignKey("EqoContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ShipTo");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.IqxNetworkInstrument", b =>
                {
                    b.HasOne("EwkQxObd.Core.Model.EqoAccount", "LinkedAccount")
                        .WithMany()
                        .HasForeignKey("LinkedAccountId");

                    b.Navigation("LinkedAccount");
                });

            modelBuilder.Entity("EwkQxObd.Core.Model.EqoTicketSource", b =>
                {
                    b.Navigation("IqxContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
